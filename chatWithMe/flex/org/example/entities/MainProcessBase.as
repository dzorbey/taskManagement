/**
 * Generated by Gas3 v2.3.2 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (MainProcess.as).
 */

package org.example.entities {

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import mx.collections.ListCollectionView;
    import org.granite.meta;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;

    [Managed]
    public class MainProcessBase extends AbstractEntityCustom {

        private var _endTask:Task;
        private var _startTask:Task;
        private var _taskList:ListCollectionView;

        public function set endTask(value:Task):void {
            _endTask = value;
        }
        [Lazy]
        public function get endTask():Task {
            return _endTask;
        }

        public function set startTask(value:Task):void {
            _startTask = value;
        }
        [Lazy]
        public function get startTask():Task {
            return _startTask;
        }

        public function set taskList(value:ListCollectionView):void {
            _taskList = value;
        }
        [Lazy]
        public function get taskList():ListCollectionView {
            return _taskList;
        }

        meta override function merge(em:IEntityManager, obj:*):void {
            var src:MainProcessBase = MainProcessBase(obj);
            super.meta::merge(em, obj);
            if (meta::isInitialized()) {
               em.meta_mergeExternal(src._endTask, _endTask, null, this, 'endTask', function setter(o:*):void{_endTask = o as Task}, false);
               em.meta_mergeExternal(src._startTask, _startTask, null, this, 'startTask', function setter(o:*):void{_startTask = o as Task}, false);
               em.meta_mergeExternal(src._taskList, _taskList, null, this, 'taskList', function setter(o:*):void{_taskList = o as ListCollectionView}, false);
            }
        }

        public override function readExternal(input:IDataInput):void {
            super.readExternal(input);
            if (meta::isInitialized()) {
                _endTask = input.readObject() as Task;
                _startTask = input.readObject() as Task;
                _taskList = input.readObject() as ListCollectionView;
            }
        }

        public override function writeExternal(output:IDataOutput):void {
            super.writeExternal(output);
            if (meta::isInitialized()) {
                output.writeObject((_endTask is IPropertyHolder) ? IPropertyHolder(_endTask).object : _endTask);
                output.writeObject((_startTask is IPropertyHolder) ? IPropertyHolder(_startTask).object : _startTask);
                output.writeObject((_taskList is IPropertyHolder) ? IPropertyHolder(_taskList).object : _taskList);
            }
        }
    }
}
