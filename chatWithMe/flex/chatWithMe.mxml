<?xml version="1.0" encoding="utf-8"?>

<s:Application
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:sfccontainer="components.sfccollapsibleaccordion.*"
	xmlns:amcharts="http://www.amcharts.com/com_internal"
    xmlns="*"
    preinitialize="application1_preinitializeHandler(event)"
    creationComplete="application1_creationCompleteHandler(event)">
	
	
	<fx:Style source="style.css"/>

	<fx:Declarations>
		<s:XMLListCollection id="myMenuData">
			<fx:XMLList>
				<menuitem label="File">
					<submenu label="New">
						<submenu label="Customer List" />
					</submenu>
				</menuitem>
				<menuitem label="Definitions">
					<submenu label="Processes" />
					<submenu label="Tasks" />
				</menuitem>
				<menuitem label="MetaData">
					<submenu label="TaskType" />
				</menuitem>
			</fx:XMLList>
		</s:XMLListCollection>
		
		<fx:XMLList id="treeData">
			<node label="Mail Box">
				<node label="Inbox">
					<node label="Marketing"/>
					<node label="Product Management"/>
					<node label="Personal"/>
				</node>
				<node label="Outbox">
					<node label="Professional"/>
					<node label="Personal"/>
				</node>
			</node>    
		</fx:XMLList>
	</fx:Declarations>

	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			
			import org.example.dto.spitterFooter;
			import org.example.entities.Spitter;
			import org.example.services.ProcessService;
			import org.example.services.SpitterService;
			import org.example.services.TaskService;
			import org.example.services.TaskTypeService;
			import org.granite.tide.Tide;
			import org.granite.tide.events.TideFaultEvent;
			import org.granite.tide.events.TideResultEvent;
			import org.granite.tide.service.DefaultServiceInitializer;
			import org.granite.tide.spring.Spring;
			

			[Bindable] 
			[Inject]
			public var spitterService:SpitterService;

			[Bindable] 
			[Inject]
			public var taskTypeService:TaskTypeService;
			
			[Bindable] 
			[Inject]
			public var taskService:TaskService;
			
			[Bindable] 
			[Inject]
			public var processService:ProcessService;
			
			[Bindable] 
			public var spitterList:ArrayCollection;
			
			[Bindable] 
			public var myString:String;


			[Bindable] 
			public var selectedTreeItem:String;
			
			[Bindable]
			public var selectedNode:XML;

			
			
			[Bindable] 
			public var myspitterFooter:spitterFooter = new spitterFooter;
			[Bindable] 
			public var spitterFooterList:ArrayCollection = new ArrayCollection();
			
			
			[Bindable]
			private var medalsAC:ArrayCollection = new ArrayCollection( [
				{ Country: "USA", Gold: 35, Silver:39, Bronze: 29 },
				{ Country: "China", Gold: 32, Silver:17, Bronze: 14 },
				{ Country: "Russia", Gold: 27, Silver:27, Bronze: 38 } ]);
			
			private function displayGold(data:Object, field:String, index:Number, percentValue:Number):String {
				var temp:String= (" " + percentValue).substr(0,6);
				return data.Country + ": " + '\n' + "Total Gold: " + data.Gold + '\n' + temp + "%";
			}
			
			
			
			[Bindable]
			public var message:String = null;
			
			private function tryLogin(username:String, password:String):void {
				//identity.login(username, password, loginResult, loginFault);
				var spitter:Spitter = new Spitter();
				spitter.name = password;
				spitterService.addSpitter(spitter,loginResult,faultListener);
			}
			
			private function loginResult(event:TideResultEvent):void {
				message = null;
				spitterService.getTop10Spitters(getTop10SpittersResultListener,faultListener);
			}
			
			
			private function getTop10SpittersResultListener(event:TideResultEvent):void {
				spitterList = event.result as ArrayCollection;
				//Alert.show("size = " +  spitterList.length.toString());
				//employeePanelLabel.spitterList = spitterList;
			}
			
			
			private function faultListener(event:TideFaultEvent):void {
				message = event.fault.faultString;
			}
			
			
			protected function application1_preinitializeHandler(event:FlexEvent):void
			{
				Spring.getInstance().initApplication();
			}
			
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				Tide.getInstance().getContext().serviceInitializer = new DefaultServiceInitializer('/chatWithMe');
				
				// Configuration for data push observer subscribed upon login/logout
				// Remove if not using DataObserver
				//Tide.getInstance().addComponent("spitterService", DataObserver);
				
				//myspitterFooter.idFooter = 0;
				//spitterFooterList.addItem(myspitterFooter);
				//spitterService.getTop10Spitters(getTop10SpittersResultListener,faultListener);
			}
			
		
			

			
			protected function myMBar_changeHandler(event:MenuEvent):void
			{
				myString = event.item.@label;
				
				var exists:Boolean = false;
				if(myString == "Customer List") {
					
						for each(var tabChild:* in mainTabNavigator.getChildren())
						{
							if(tabChild is customerPanel) {
								exists = true;
							}
						}
						
					if(exists == false) {
						var myCustomerPanel:customerPanel = new customerPanel();
						myCustomerPanel.spitterList = spitterList;
						mainTabNavigator.addChild(myCustomerPanel);
						mainTabNavigator.selectedIndex = mainTabNavigator.selectedIndex + 1;
						
						closeButton.includeInLayout = true;
						closeButton.visible = true;
					}
				}else if(myString == "TaskType") {
					
					
					for each(var tabChildTaskType:* in mainTabNavigator.getChildren())
					{
						if(tabChildTaskType is taskTypePanel) {
							exists = true;
						}
					}
					
					if(exists == false) {
						var mytaskTypePanel:taskTypePanel = new taskTypePanel();
						//mytaskTypePanel.taskTypeList = spitterList;
						mytaskTypePanel.taskTypeService = taskTypeService;
						mainTabNavigator.addChild(mytaskTypePanel);
						mainTabNavigator.selectedIndex = mainTabNavigator.selectedIndex + 1;
						
						closeButton.includeInLayout = true;
						closeButton.visible = true;
					}
				}else if(myString == "Processes") {
					
					for each(var tabChildProcessListPanel:* in mainTabNavigator.getChildren())
					{
						if(tabChildProcessListPanel is processListPanel) {
							exists = true;
						}
					}
					
					if(exists == false) {
						var myProcessListPanel:processListPanel = new processListPanel();
						//mytaskTypePanel.taskTypeList = spitterList;
						myProcessListPanel.processService = processService;
						myProcessListPanel.taskTypeService = taskTypeService;
						myProcessListPanel.taskService = taskService;
						mainTabNavigator.addChild(myProcessListPanel);
						mainTabNavigator.selectedIndex = mainTabNavigator.selectedIndex + 1;
						
						closeButton.includeInLayout = true;
						closeButton.visible = true;
					}
				}else if(myString == "Tasks") {
					
					for each(var tabChildTaskListPanel:* in mainTabNavigator.getChildren())
					{
						if(tabChildTaskListPanel is taskListPanel) {
							exists = true;
						}
					}
					
					if(exists == false) {
						var myTaskListPanel:taskListPanel = new taskListPanel();
						//mytaskTypePanel.taskTypeList = spitterList;
						myTaskListPanel.taskService = taskService;
						mainTabNavigator.addChild(myTaskListPanel);
						mainTabNavigator.selectedIndex = mainTabNavigator.selectedIndex + 1;
						
						closeButton.includeInLayout = true;
						closeButton.visible = true;
					}
				}
				
			}
			
	
			
			protected function button1_clickHandler():void
			{
				if (mainTabNavigator.getChildren().length > 1)
				{
					mainTabNavigator.removeChildAt(mainTabNavigator.selectedIndex);		
				}
				
				if(mainTabNavigator.getChildren().length == 1) {
					closeButton.includeInLayout = false;
					closeButton.visible = false;
				}
				
			}
			
			protected function mainTabNavigator_changeHandler():void
			{
				if(mainTabNavigator.selectedIndex == 0) {
					closeButton.includeInLayout = false;
					closeButton.visible = false;
				} else {
					closeButton.includeInLayout = true;
					closeButton.visible = true;
				}
			}
			
			
			
			protected function myTree_changeHandler(event:ListEvent):void
			{
				if((Tree(event.target).selectedItem as XML).@label == "Marketing") {
					
					var exists:Boolean = false;
					for each(var tabChild:* in mainTabNavigator.getChildren())
					{
						if(tabChild is marketingPanel) {
							exists = true;
						}
					}
					
					if(exists == false) {
						var mymarketingPanel:marketingPanel = new marketingPanel();
						mymarketingPanel.spitterList = spitterList;
						mainTabNavigator.addChild(mymarketingPanel);
						mainTabNavigator.selectedIndex = mainTabNavigator.selectedIndex + 1;
						
						closeButton.includeInLayout = true;
						closeButton.visible = true;
					}
				}
			}
			
		]]>
	</fx:Script>
	
	
	
	
	<mx:VBox width="100%" height="100%">
		
		
	    <mx:HBox width="100%" height="30">
		
			
			<mx:HBox  width="248">
				
			</mx:HBox>
			
			
			<mx:HBox  width="100%">
				<mx:MenuBar id="myMBar" dataProvider="{myMenuData}" labelField="@label" width="100%" change="myMBar_changeHandler(event)"/>
			</mx:HBox>
			
			
			
	    </mx:HBox>
	
		
		
		<mx:HBox width="100%" height="100%" horizontalGap="6">
			
		
			
				<sfccontainer:CollapsibleAccordion id="collapsibleAccordion1" 
												 height="100%"
												 orientation="right"
												 barSize="20"
												 currentWidth="20"
												 creationComplete="{collapsibleAccordion1.selectedIndex = 0}">
					
					<mx:Canvas width="100%" height="100%" label="Process Tree" >

						<mx:Tree id="myTree" width="100%" height="100%" labelField="@label"
								 showRoot="true" dataProvider="{treeData}" change="myTree_changeHandler(event)"/>
						
					</mx:Canvas>
					
					<mx:Canvas width="100%" height="100%" label="Entry" >
						<s:BorderContainer width="245">
							<s:Form>
								<s:FormItem label="Username" height="20">
									<s:TextInput id="username" text="{myString}"/>
								</s:FormItem>
								<s:FormItem label="Password" height="20">
									<s:TextInput id="password" displayAsPassword="true"
												 enter="tryLogin(username.text, password.text);"/>
								</s:FormItem>
								<s:FormItem>
									<s:Label text="{message}" textAlign="center"/>
									<s:Button label="Login" 
											  click="tryLogin(username.text, password.text);"/>
								</s:FormItem>
							</s:Form>
						</s:BorderContainer>
					</mx:Canvas> 
				</sfccontainer:CollapsibleAccordion>
				
			
		
			
			
			<mx:VBox width="100%" height="100%" horizontalAlign="left">
				
				
				
				
				<mx:TabNavigator id="mainTabNavigator" width="100%" height="100%" change="mainTabNavigator_changeHandler()">

				<!--	<employeePanel  id="employeePanelLabel"  spitterService="{spitterService}"/>
					-->
					
					<processListPanel id="myprocessListPanel" processService="{processService}" taskService="{taskService}" taskTypeService="{taskTypeService}">
						
					</processListPanel>
					
				</mx:TabNavigator>
				
				
				
				<s:Button id="closeButton" label="Close Panel" click="button1_clickHandler()" includeInLayout="false" visible="false" />
					

				
				<!--
				<mx:HBox width="100%" height="250" horizontalAlign="right" verticalAlign="bottom" paddingBottom="0">
			
					<mx:PieChart id="chart" height="250" width="250" paddingRight="5" paddingLeft="5" color="0x323232" paddingBottom="0" 
								 showDataTips="true" dataProvider="{medalsAC}"  fontSize="13">
						
						<mx:series>
							<mx:PieSeries labelPosition="callout" field="Gold" labelFunction="displayGold" fontSize="13">
								<mx:calloutStroke>
									<mx:Stroke weight="0" color="0x888888" alpha="1.0"/>
								</mx:calloutStroke>
								<mx:radialStroke>
									<mx:Stroke weight="0" color="#FFFFFF" alpha="0.20"/>
								</mx:radialStroke>
								<mx:stroke>
									<mx:Stroke color="0" alpha="0.20" weight="2"/>
								</mx:stroke>
							</mx:PieSeries>
						</mx:series>
					</mx:PieChart>
				
				</mx:HBox>
				-->
				
				
			</mx:VBox>
			
			
		</mx:HBox>
	</mx:VBox>
	
		

</s:Application>
